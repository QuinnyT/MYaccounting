{
  "version": 3,
  "sources": ["../../color-js/color.js"],
  "sourcesContent": ["// Copyright (c) 2008-2013, Andrew Brehaut, Tim Baumann, Matt Wilson, \n//                          Simon Heimler, Michel Vielmetter \n//\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// * Redistributions of source code must retain the above copyright notice,\n//   this list of conditions and the following disclaimer.\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\n// color.js - version 1.0.1\n//\n// HSV <-> RGB code based on code from http://www.cs.rit.edu/~ncs/color/t_convert.html\n// object function created by Douglas Crockford.\n// Color scheme degrees taken from the colorjack.com colorpicker\n//\n// HSL support kindly provided by Tim Baumann - http://github.com/timjb\n\n// create namespaces\n/*global net */\nif (\"undefined\" == typeof net) {\n    var net = {};\n}\nif (!net.brehaut) {\n    net.brehaut = {};\n}\n\n// this module function is called with net.brehaut as 'this'\n(function() {\n    \"use strict\";\n    // Constants\n\n    // css_colors maps color names onto their hex values\n    // these names are defined by W3C\n    \n    var css_colors = {aliceblue:'#F0F8FF',antiquewhite:'#FAEBD7',aqua:'#00FFFF',aquamarine:'#7FFFD4',azure:'#F0FFFF',beige:'#F5F5DC',bisque:'#FFE4C4',black:'#000000',blanchedalmond:'#FFEBCD',blue:'#0000FF',blueviolet:'#8A2BE2',brown:'#A52A2A',burlywood:'#DEB887',cadetblue:'#5F9EA0',chartreuse:'#7FFF00',chocolate:'#D2691E',coral:'#FF7F50',cornflowerblue:'#6495ED',cornsilk:'#FFF8DC',crimson:'#DC143C',cyan:'#00FFFF',darkblue:'#00008B',darkcyan:'#008B8B',darkgoldenrod:'#B8860B',darkgray:'#A9A9A9',darkgrey:'#A9A9A9',darkgreen:'#006400',darkkhaki:'#BDB76B',darkmagenta:'#8B008B',darkolivegreen:'#556B2F',darkorange:'#FF8C00',darkorchid:'#9932CC',darkred:'#8B0000',darksalmon:'#E9967A',darkseagreen:'#8FBC8F',darkslateblue:'#483D8B',darkslategray:'#2F4F4F',darkslategrey:'#2F4F4F',darkturquoise:'#00CED1',darkviolet:'#9400D3',deeppink:'#FF1493',deepskyblue:'#00BFFF',dimgray:'#696969',dimgrey:'#696969',dodgerblue:'#1E90FF',firebrick:'#B22222',floralwhite:'#FFFAF0',forestgreen:'#228B22',fuchsia:'#FF00FF',gainsboro:'#DCDCDC',ghostwhite:'#F8F8FF',gold:'#FFD700',goldenrod:'#DAA520',gray:'#808080',grey:'#808080',green:'#008000',greenyellow:'#ADFF2F',honeydew:'#F0FFF0',hotpink:'#FF69B4',indianred:'#CD5C5C',indigo:'#4B0082',ivory:'#FFFFF0',khaki:'#F0E68C',lavender:'#E6E6FA',lavenderblush:'#FFF0F5',lawngreen:'#7CFC00',lemonchiffon:'#FFFACD',lightblue:'#ADD8E6',lightcoral:'#F08080',lightcyan:'#E0FFFF',lightgoldenrodyellow:'#FAFAD2',lightgray:'#D3D3D3',lightgrey:'#D3D3D3',lightgreen:'#90EE90',lightpink:'#FFB6C1',lightsalmon:'#FFA07A',lightseagreen:'#20B2AA',lightskyblue:'#87CEFA',lightslategray:'#778899',lightslategrey:'#778899',lightsteelblue:'#B0C4DE',lightyellow:'#FFFFE0',lime:'#00FF00',limegreen:'#32CD32',linen:'#FAF0E6',magenta:'#FF00FF',maroon:'#800000',mediumaquamarine:'#66CDAA',mediumblue:'#0000CD',mediumorchid:'#BA55D3',mediumpurple:'#9370D8',mediumseagreen:'#3CB371',mediumslateblue:'#7B68EE',mediumspringgreen:'#00FA9A',mediumturquoise:'#48D1CC',mediumvioletred:'#C71585',midnightblue:'#191970',mintcream:'#F5FFFA',mistyrose:'#FFE4E1',moccasin:'#FFE4B5',navajowhite:'#FFDEAD',navy:'#000080',oldlace:'#FDF5E6',olive:'#808000',olivedrab:'#6B8E23',orange:'#FFA500',orangered:'#FF4500',orchid:'#DA70D6',palegoldenrod:'#EEE8AA',palegreen:'#98FB98',paleturquoise:'#AFEEEE',palevioletred:'#D87093',papayawhip:'#FFEFD5',peachpuff:'#FFDAB9',peru:'#CD853F',pink:'#FFC0CB',plum:'#DDA0DD',powderblue:'#B0E0E6',purple:'#800080',rebeccapurple:'#663399',red:'#FF0000',rosybrown:'#BC8F8F',royalblue:'#4169E1',saddlebrown:'#8B4513',salmon:'#FA8072',sandybrown:'#F4A460',seagreen:'#2E8B57',seashell:'#FFF5EE',sienna:'#A0522D',silver:'#C0C0C0',skyblue:'#87CEEB',slateblue:'#6A5ACD',slategray:'#708090',slategrey:'#708090',snow:'#FFFAFA',springgreen:'#00FF7F',steelblue:'#4682B4',tan:'#D2B48C',teal:'#008080',thistle:'#D8BFD8',tomato:'#FF6347',turquoise:'#40E0D0',violet:'#EE82EE',wheat:'#F5DEB3',white:'#FFFFFF',whitesmoke:'#F5F5F5',yellow:'#FFFF00',yellowgreen:'#9ACD32'};\n\n\n    // CSS value regexes, according to http://www.w3.org/TR/css3-values/\n    var css_integer = '(?:\\\\+|-)?\\\\d+';\n    var css_float = '(?:\\\\+|-)?\\\\d*\\\\.\\\\d+';\n    var css_number = '(?:' + css_integer + ')|(?:' + css_float + ')';\n    css_integer = '(' + css_integer + ')';\n    css_float = '(' + css_float + ')';\n    css_number = '(' + css_number + ')';\n    var css_percentage = css_number + '%';\n    var css_whitespace = '\\\\s*?';\n\n    // http://www.w3.org/TR/2003/CR-css3-color-20030514/\n    var hsl_hsla_regex = new RegExp([\n        '^hsl(a?)\\\\(', css_number, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n    var rgb_rgba_integer_regex = new RegExp([\n        '^rgb(a?)\\\\(', css_integer, ',', css_integer, ',', css_integer, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n    var rgb_rgba_percentage_regex = new RegExp([\n        '^rgb(a?)\\\\(', css_percentage, ',', css_percentage, ',', css_percentage, '(,(', css_number, '))?\\\\)$'\n    ].join(css_whitespace));\n\n    // Package wide variables\n\n    // becomes the top level prototype object\n    var color;\n\n    /* registered_models contains the template objects for all the\n     * models that have been registered for the color class.\n     */\n    var registered_models = [];\n\n\n    /* factories contains methods to create new instance of\n     * different color models that have been registered.\n     */\n    var factories = {};\n\n    // Utility functions\n\n    /* object is Douglas Crockfords object function for prototypal\n     * inheritance.\n     */\n    if (!this.object) {\n        this.object = function(o) {\n            function F() {}\n            F.prototype = o;\n            return new F();\n        };\n    }\n    var object = this.object;\n\n    /* takes a value, converts to string if need be, then pads it\n     * to a minimum length.\n     */\n    function pad(val, len) {\n        val = val.toString();\n        var padded = [];\n\n        for (var i = 0, j = Math.max(len - val.length, 0); i < j; i++) {\n            padded.push('0');\n        }\n\n        padded.push(val);\n        return padded.join('');\n    }\n\n\n    /* takes a string and returns a new string with the first letter\n     * capitalised\n     */\n    function capitalise(s) {\n        return s.slice(0, 1).toUpperCase() + s.slice(1);\n    }\n\n    /* removes leading and trailing whitespace\n     */\n    function trim(str) {\n        return str.replace(/^\\s+|\\s+$/g, '');\n    }\n\n    /* used to apply a method to object non-destructively by\n     * cloning the object and then apply the method to that\n     * new object\n     */\n    function cloneOnApply(meth) {\n        return function() {\n            var cloned = this.clone();\n            meth.apply(cloned, arguments);\n            return cloned;\n        };\n    }\n\n\n    /* registerModel is used to add additional representations\n     * to the color code, and extend the color API with the new\n     * operation that model provides. see before for examples\n     */\n    function registerModel(name, model) {\n        var proto = object(color);\n        var fields = []; // used for cloning and generating accessors\n\n        var to_meth = 'to' + capitalise(name);\n\n        function convertAndApply(meth) {\n            return function() {\n                return meth.apply(this[to_meth](), arguments);\n            };\n        }\n\n        for (var key in model)\n            if (model.hasOwnProperty(key)) {\n                proto[key] = model[key];\n                var prop = proto[key];\n\n                if (key.slice(0, 1) == '_') {\n                    continue;\n                }\n                if (!(key in color) && \"function\" == typeof prop) {\n                    // the method found on this object is a) public and b) not\n                    // currently supported by the color object. Create an impl that\n                    // calls the toModel function and passes that new object\n                    // onto the correct method with the args.\n                    color[key] = convertAndApply(prop);\n                } else if (\"function\" != typeof prop) {\n                    // we have found a public property. create accessor methods\n                    // and bind them up correctly\n                    fields.push(key);\n                    var getter = 'get' + capitalise(key);\n                    var setter = 'set' + capitalise(key);\n\n                    color[getter] = convertAndApply(\n                        proto[getter] = (function(key) {\n                            return function() {\n                                return this[key];\n                            };\n                        })(key)\n                    );\n\n                    color[setter] = convertAndApply(\n                        proto[setter] = (function(key) {\n                            return function(val) {\n                                var cloned = this.clone();\n                                cloned[key] = val;\n                                return cloned;\n                            };\n                        })(key)\n                    );\n                }\n            } // end of for over model\n\n            // a method to create a new object - largely so prototype chains dont\n            // get insane. This uses an unrolled 'object' so that F is cached\n            // for later use. this is approx a 25% speed improvement\n\n        function F() {}\n        F.prototype = proto;\n\n        function factory() {\n            return new F();\n        }\n        factories[name] = factory;\n\n        proto.clone = function() {\n            var cloned = factory();\n            for (var i = 0, j = fields.length; i < j; i++) {\n                var key = fields[i];\n                cloned[key] = this[key];\n            }\n            return cloned;\n        };\n\n        color[to_meth] = function() {\n            return factory();\n        };\n\n        registered_models.push(proto);\n\n        return proto;\n    } // end of registerModel\n\n    // Template Objects\n\n    /* color is the root object in the color hierarchy. It starts\n     * life as a very simple object, but as color models are\n     * registered it has methods programmatically added to manage\n     * conversions as needed.\n     */\n    color = {\n        /* fromObject takes an argument and delegates to the internal\n         * color models to try to create a new instance.\n         */\n        fromObject: function(o) {\n            if (!o) {\n                return object(color);\n            }\n\n            for (var i = 0, j = registered_models.length; i < j; i++) {\n                var nu = registered_models[i].fromObject(o);\n                if (nu) {\n                    return nu;\n                }\n            }\n\n            return object(color);\n        },\n\n        toString: function() {\n            return this.toCSS();\n        }\n    };\n\n    var transparent = null; // defined with an RGB later.\n\n    /* RGB is the red green blue model. This definition is converted\n     * to a template object by registerModel.\n     */\n    registerModel('RGB', {\n        red: 0,\n        green: 0,\n        blue: 0,\n        alpha: 0,\n\n        /* getLuminance returns a value between 0 and 1, this is the\n         * luminance calcuated according to\n         * http://www.poynton.com/notes/colour_and_gamma/ColorFAQ.html#RTFToC9\n         */\n        getLuminance: function() {\n            return (this.red * 0.2126) + (this.green * 0.7152) + (this.blue * 0.0722);\n        },\n\n        /* does an alpha based blend of color onto this. alpha is the\n         * amount of 'color' to use. (0 to 1)\n         */\n        blend: function(color, alpha) {\n            color = color.toRGB();\n            alpha = Math.min(Math.max(alpha, 0), 1);\n            var rgb = this.clone();\n\n            rgb.red = (rgb.red * (1 - alpha)) + (color.red * alpha);\n            rgb.green = (rgb.green * (1 - alpha)) + (color.green * alpha);\n            rgb.blue = (rgb.blue * (1 - alpha)) + (color.blue * alpha);\n            rgb.alpha = (rgb.alpha * (1 - alpha)) + (color.alpha * alpha);\n\n            return rgb;\n        },\n\n        /* fromObject attempts to convert an object o to and RGB\n         * instance. This accepts an object with red, green and blue\n         * members or a string. If the string is a known CSS color name\n         * or a hexdecimal string it will accept it.\n         */\n        fromObject: function(o) {\n            if (o instanceof Array) {\n                return this._fromRGBArray(o);\n            }\n            if (\"string\" == typeof o) {\n                return this._fromCSS(trim(o));\n            }\n            if (o.hasOwnProperty('red') &&\n                o.hasOwnProperty('green') &&\n                o.hasOwnProperty('blue')) {\n                return this._fromRGB(o);\n            }\n            // nothing matchs, not an RGB object\n        },\n\n        _stringParsers: [\n            // CSS RGB(A) literal:\n            function(css) {\n                css = trim(css);\n\n                var withInteger = match(rgb_rgba_integer_regex, 255);\n                if (withInteger) {\n                    return withInteger;\n                }\n                return match(rgb_rgba_percentage_regex, 100);\n\n                function match(regex, max_value) {\n                    var colorGroups = css.match(regex);\n\n                    // If there is an \"a\" after \"rgb\", there must be a fourth parameter and the other way round\n                    if (!colorGroups || (!!colorGroups[1] + !!colorGroups[5] === 1)) {\n                        return null;\n                    }\n\n                    var rgb = factories.RGB();\n                    rgb.red = Math.min(1, Math.max(0, colorGroups[2] / max_value));\n                    rgb.green = Math.min(1, Math.max(0, colorGroups[3] / max_value));\n                    rgb.blue = Math.min(1, Math.max(0, colorGroups[4] / max_value));\n                    rgb.alpha = !!colorGroups[5] ? Math.min(Math.max(parseFloat(colorGroups[6]), 0), 1) : 1;\n\n                    return rgb;\n                }\n            },\n\n            function(css) {\n                var lower = css.toLowerCase();\n                if (lower in css_colors) {\n                    css = css_colors[lower];\n                }\n\n                if (!css.match(/^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$/)) {\n                    return;\n                }\n\n                css = css.replace(/^#/, '');\n\n                var bytes = css.length / 3;\n\n                var max = Math.pow(16, bytes) - 1;\n\n                var rgb = factories.RGB();\n                rgb.red = parseInt(css.slice(0, bytes), 16) / max;\n                rgb.green = parseInt(css.slice(bytes * 1, bytes * 2), 16) / max;\n                rgb.blue = parseInt(css.slice(bytes * 2), 16) / max;\n                rgb.alpha = 1;\n                return rgb;\n            },\n\n            function(css) {\n                if (css.toLowerCase() !== 'transparent') return;\n\n                return transparent;\n            }\n        ],\n\n        _fromCSS: function(css) {\n            var color = null;\n            for (var i = 0, j = this._stringParsers.length; i < j; i++) {\n                color = this._stringParsers[i](css);\n                if (color) return color;\n            }\n        },\n\n        _fromRGB: function(RGB) {\n            var newRGB = factories.RGB();\n\n            newRGB.red = RGB.red;\n            newRGB.green = RGB.green;\n            newRGB.blue = RGB.blue;\n            newRGB.alpha = RGB.hasOwnProperty('alpha') ? RGB.alpha : 1;\n\n            return newRGB;\n        },\n\n        _fromRGBArray: function(RGB) {\n            var newRGB = factories.RGB();\n\n            newRGB.red = Math.max(0, Math.min(1, RGB[0] / 255));\n            newRGB.green = Math.max(0, Math.min(1, RGB[1] / 255));\n            newRGB.blue = Math.max(0, Math.min(1, RGB[2] / 255));\n            newRGB.alpha = RGB[3] !== undefined ? Math.max(0, Math.min(1, RGB[3])) : 1;\n\n            return newRGB;\n        },\n\n        // convert to a CSS string. defaults to two bytes a value\n        toCSSHex: function(bytes) {\n            bytes = bytes || 2;\n\n            var max = Math.pow(16, bytes) - 1;\n            var css = [\n                \"#\",\n                pad(Math.round(this.red * max).toString(16).toUpperCase(), bytes),\n                pad(Math.round(this.green * max).toString(16).toUpperCase(), bytes),\n                pad(Math.round(this.blue * max).toString(16).toUpperCase(), bytes)\n            ];\n\n            return css.join('');\n        },\n\n        toCSS: function(bytes) {\n            if (this.alpha === 1) return this.toCSSHex(bytes);\n\n            var max = 255;\n\n            var components = [\n                'rgba(',\n                Math.max(0, Math.min(max, Math.round(this.red * max))), ',',\n                Math.max(0, Math.min(max, Math.round(this.green * max))), ',',\n                Math.max(0, Math.min(max, Math.round(this.blue * max))), ',',\n                Math.max(0, Math.min(1, this.alpha)),\n                ')'\n            ];\n\n            return components.join('');\n        },\n\n        toHSV: function() {\n            var hsv = factories.HSV();\n            var min, max, delta;\n\n            min = Math.min(this.red, this.green, this.blue);\n            max = Math.max(this.red, this.green, this.blue);\n            hsv.value = max; // v\n\n            delta = max - min;\n\n            if (delta == 0) { // white, grey, black\n                hsv.hue = hsv.saturation = 0;\n            } else { // chroma\n                hsv.saturation = delta / max;\n\n                if (this.red == max) {\n                    hsv.hue = (this.green - this.blue) / delta; // between yellow & magenta\n                } else if (this.green == max) {\n                    hsv.hue = 2 + (this.blue - this.red) / delta; // between cyan & yellow\n                } else {\n                    hsv.hue = 4 + (this.red - this.green) / delta; // between magenta & cyan\n                }\n\n                hsv.hue = ((hsv.hue * 60) + 360) % 360; // degrees\n            }\n\n            hsv.alpha = this.alpha;\n\n            return hsv;\n        },\n        toHSL: function() {\n            return this.toHSV().toHSL();\n        },\n\n        toRGB: function() {\n            return this.clone();\n        }\n    });\n\n    transparent = color.fromObject({\n        red: 0,\n        blue: 0,\n        green: 0,\n        alpha: 0\n    });\n\n\n    /* Like RGB above, this object describes what will become the HSV\n     * template object. This model handles hue, saturation and value.\n     * hue is the number of degrees around the color wheel, saturation\n     * describes how much color their is and value is the brightness.\n     */\n    registerModel('HSV', {\n        hue: 0,\n        saturation: 0,\n        value: 1,\n        alpha: 1,\n\n        shiftHue: cloneOnApply(function(degrees) {\n            var hue = (this.hue + degrees) % 360;\n            if (hue < 0) {\n                hue = (360 + hue) % 360;\n            }\n\n            this.hue = hue;\n        }),\n\n        devalueByAmount: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value - val, 0));\n        }),\n\n        devalueByRatio: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value * (1 - val), 0));\n        }),\n\n        valueByAmount: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value + val, 0));\n        }),\n\n        valueByRatio: cloneOnApply(function(val) {\n            this.value = Math.min(1, Math.max(this.value * (1 + val), 0));\n        }),\n\n        desaturateByAmount: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation - val, 0));\n        }),\n\n        desaturateByRatio: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation * (1 - val), 0));\n        }),\n\n        saturateByAmount: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation + val, 0));\n        }),\n\n        saturateByRatio: cloneOnApply(function(val) {\n            this.saturation = Math.min(1, Math.max(this.saturation * (1 + val), 0));\n        }),\n\n        schemeFromDegrees: function(degrees) {\n            var newColors = [];\n            for (var i = 0, j = degrees.length; i < j; i++) {\n                var col = this.clone();\n                col.hue = (this.hue + degrees[i]) % 360;\n                newColors.push(col);\n            }\n            return newColors;\n        },\n\n        complementaryScheme: function() {\n            return this.schemeFromDegrees([0, 180]);\n        },\n\n        splitComplementaryScheme: function() {\n            return this.schemeFromDegrees([0, 150, 320]);\n        },\n\n        splitComplementaryCWScheme: function() {\n            return this.schemeFromDegrees([0, 150, 300]);\n        },\n\n        splitComplementaryCCWScheme: function() {\n            return this.schemeFromDegrees([0, 60, 210]);\n        },\n\n        triadicScheme: function() {\n            return this.schemeFromDegrees([0, 120, 240]);\n        },\n\n        clashScheme: function() {\n            return this.schemeFromDegrees([0, 90, 270]);\n        },\n\n        tetradicScheme: function() {\n            return this.schemeFromDegrees([0, 90, 180, 270]);\n        },\n\n        fourToneCWScheme: function() {\n            return this.schemeFromDegrees([0, 60, 180, 240]);\n        },\n\n        fourToneCCWScheme: function() {\n            return this.schemeFromDegrees([0, 120, 180, 300]);\n        },\n\n        fiveToneAScheme: function() {\n            return this.schemeFromDegrees([0, 115, 155, 205, 245]);\n        },\n\n        fiveToneBScheme: function() {\n            return this.schemeFromDegrees([0, 40, 90, 130, 245]);\n        },\n\n        fiveToneCScheme: function() {\n            return this.schemeFromDegrees([0, 50, 90, 205, 320]);\n        },\n\n        fiveToneDScheme: function() {\n            return this.schemeFromDegrees([0, 40, 155, 270, 310]);\n        },\n\n        fiveToneEScheme: function() {\n            return this.schemeFromDegrees([0, 115, 230, 270, 320]);\n        },\n\n        sixToneCWScheme: function() {\n            return this.schemeFromDegrees([0, 30, 120, 150, 240, 270]);\n        },\n\n        sixToneCCWScheme: function() {\n            return this.schemeFromDegrees([0, 90, 120, 210, 240, 330]);\n        },\n\n        neutralScheme: function() {\n            return this.schemeFromDegrees([0, 15, 30, 45, 60, 75]);\n        },\n\n        analogousScheme: function() {\n            return this.schemeFromDegrees([0, 30, 60, 90, 120, 150]);\n        },\n\n        fromObject: function(o) {\n            if (o.hasOwnProperty('hue') &&\n                o.hasOwnProperty('saturation') &&\n                o.hasOwnProperty('value')) {\n                var hsv = factories.HSV();\n\n                hsv.hue = o.hue;\n                hsv.saturation = o.saturation;\n                hsv.value = o.value;\n                hsv.alpha = o.hasOwnProperty('alpha') ? o.alpha : 1;\n\n                return hsv;\n            }\n            // nothing matches, not an HSV object\n            return null;\n        },\n\n        _normalise: function() {\n            this.hue %= 360;\n            this.saturation = Math.min(Math.max(0, this.saturation), 1);\n            this.value = Math.min(Math.max(0, this.value));\n            this.alpha = Math.min(1, Math.max(0, this.alpha));\n        },\n\n        toRGB: function() {\n            this._normalise();\n\n            var rgb = factories.RGB();\n            var i;\n            var f, p, q, t;\n\n            if (this.saturation === 0) {\n                // achromatic (grey)\n                rgb.red = this.value;\n                rgb.green = this.value;\n                rgb.blue = this.value;\n                rgb.alpha = this.alpha;\n                return rgb;\n            }\n\n            var h = this.hue / 60; // sector 0 to 5\n            i = Math.floor(h);\n            f = h - i; // factorial part of h\n            p = this.value * (1 - this.saturation);\n            q = this.value * (1 - this.saturation * f);\n            t = this.value * (1 - this.saturation * (1 - f));\n\n            switch (i) {\n                case 0:\n                    rgb.red = this.value;\n                    rgb.green = t;\n                    rgb.blue = p;\n                    break;\n                case 1:\n                    rgb.red = q;\n                    rgb.green = this.value;\n                    rgb.blue = p;\n                    break;\n                case 2:\n                    rgb.red = p;\n                    rgb.green = this.value;\n                    rgb.blue = t;\n                    break;\n                case 3:\n                    rgb.red = p;\n                    rgb.green = q;\n                    rgb.blue = this.value;\n                    break;\n                case 4:\n                    rgb.red = t;\n                    rgb.green = p;\n                    rgb.blue = this.value;\n                    break;\n                default: // case 5:\n                    rgb.red = this.value;\n                    rgb.green = p;\n                    rgb.blue = q;\n                    break;\n            }\n\n            rgb.alpha = this.alpha;\n\n            return rgb;\n        },\n        toHSL: function() {\n            this._normalise();\n\n            var hsl = factories.HSL();\n\n            hsl.hue = this.hue;\n            var l = (2 - this.saturation) * this.value,\n                s = this.saturation * this.value;\n            if (l && 2 - l) {\n                s /= (l <= 1) ? l : 2 - l;\n            }\n            l /= 2;\n            hsl.saturation = s;\n            hsl.lightness = l;\n            hsl.alpha = this.alpha;\n\n            return hsl;\n        },\n\n        toHSV: function() {\n            return this.clone();\n        }\n    });\n\n    registerModel('HSL', {\n        hue: 0,\n        saturation: 0,\n        lightness: 0,\n        alpha: 1,\n\n        darkenByAmount: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness - val, 0));\n        }),\n\n        darkenByRatio: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness * (1 - val), 0));\n        }),\n\n        lightenByAmount: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness + val, 0));\n        }),\n\n        lightenByRatio: cloneOnApply(function(val) {\n            this.lightness = Math.min(1, Math.max(this.lightness * (1 + val), 0));\n        }),\n\n        fromObject: function(o) {\n            if (\"string\" == typeof o) {\n                return this._fromCSS(o);\n            }\n            if (o.hasOwnProperty('hue') &&\n                o.hasOwnProperty('saturation') &&\n                o.hasOwnProperty('lightness')) {\n                return this._fromHSL(o);\n            }\n            // nothing matchs, not an RGB object\n        },\n\n        _fromCSS: function(css) {\n            var colorGroups = trim(css).match(hsl_hsla_regex);\n\n            // if there is an \"a\" after \"hsl\", there must be a fourth parameter and the other way round\n            if (!colorGroups || (!!colorGroups[1] + !!colorGroups[5] === 1)) {\n                return null;\n            }\n\n            var hsl = factories.HSL();\n            hsl.hue = (colorGroups[2] % 360 + 360) % 360;\n            hsl.saturation = Math.max(0, Math.min(parseInt(colorGroups[3], 10) / 100, 1));\n            hsl.lightness = Math.max(0, Math.min(parseInt(colorGroups[4], 10) / 100, 1));\n            hsl.alpha = !!colorGroups[5] ? Math.max(0, Math.min(1, parseFloat(colorGroups[6]))) : 1;\n\n            return hsl;\n        },\n\n        _fromHSL: function(HSL) {\n            var newHSL = factories.HSL();\n\n            newHSL.hue = HSL.hue;\n            newHSL.saturation = HSL.saturation;\n            newHSL.lightness = HSL.lightness;\n\n            newHSL.alpha = HSL.hasOwnProperty('alpha') ? HSL.alpha : 1;\n\n            return newHSL;\n        },\n\n        _normalise: function() {\n            this.hue = (this.hue % 360 + 360) % 360;\n            this.saturation = Math.min(Math.max(0, this.saturation), 1);\n            this.lightness = Math.min(Math.max(0, this.lightness));\n            this.alpha = Math.min(1, Math.max(0, this.alpha));\n        },\n\n        toHSL: function() {\n            return this.clone();\n        },\n        toHSV: function() {\n            this._normalise();\n\n            var hsv = factories.HSV();\n\n            // http://ariya.blogspot.com/2008/07/converting-between-hsl-and-hsv.html\n            hsv.hue = this.hue; // H\n            var l = 2 * this.lightness,\n                s = this.saturation * ((l <= 1) ? l : 2 - l);\n            hsv.value = (l + s) / 2; // V\n            hsv.saturation = ((2 * s) / (l + s)) || 0; // S\n            hsv.alpha = this.alpha;\n\n            return hsv;\n        },\n        toRGB: function() {\n            return this.toHSV().toRGB();\n        }\n    });\n\n    // Package specific exports\n\n    /* the Color function is a factory for new color objects.\n     */\n    function Color(o) {\n        return color.fromObject(o);\n    }\n    Color.isValid = function(str) {\n        var key, c = Color(str);\n\n        var length = 0;\n        for (key in c) {\n            if (c.hasOwnProperty(key)) {\n                length++;\n            }\n        }\n\n        return length > 0;\n    };\n    net.brehaut.Color = Color;\n}).call(net.brehaut);\n\n/* Export to CommonJS\n */\nif (typeof module !== 'undefined') {\n    module.exports = net.brehaut.Color;\n}"],
  "mappings": "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",
  "names": ["key", "color"]
}
